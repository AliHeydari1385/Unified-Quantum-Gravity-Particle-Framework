# UQCMF v1.0-integrated-UQGPF v8.175
# Integrates UQGPF fitting with UQCMF mind-gravity interaction
# Requirements: numpy, pandas, scipy, emcee, corner
# Run in an environment like Google Colab or Jupyter

import numpy as np
import pandas as pd
from scipy.optimize import minimize
import emcee  # For MCMC
import corner  # For posteriors plot

# Step 0: Reconstruct duplicates_log_v8_120.txt from extracted chunks
# Collected all unique lines from provided pages (approx. 286 lines based on metadata)
# Columns: CID, zCMB, zCMBERR, m_b_corr, m_b_corr_err_DIAG

reconstructed_data = [
    # From page 1
    ['2011fe', 0.00122, 0.00002, 9.74571, 1.516210],
    ['2011fe', 0.00122, 0.00002, 9.80286, 1.517230],
    ['2012cg', 0.00256, 0.00002, 11.47030, 0.781906],
    ['2012cg', 0.00256, 0.00002, 11.49190, 0.798612],
    ['2013aa', 0.00478, 0.00015, 11.20740, 0.594070],
    ['2013aa', 0.00478, 0.00015, 11.29980, 0.579622],
    ['2017cbv', 0.00478, 0.00015, 11.14830, 0.577815],
    ['2017cbv', 0.00478, 0.00015, 11.25770, 0.577916],
    ['2013dy', 0.00293, 0.00012, 12.24600, 0.513549],
    ['2013dy', 0.00293, 0.00012, 12.30810, 0.530151],
    ['2012ht', 0.00465, 0.00002, 12.67790, 0.441191],
    ['2012ht', 0.00465, 0.00002, 12.78000, 0.419535],
    ['2012fr', 0.00460, 0.00015, 11.88010, 0.446066],
    ['2007on', 0.00460, 0.00015, 12.39950, 0.564078],
    ['2012fr', 0.00460, 0.00015, 11.97040, 0.409689],
    ['2007on', 0.00460, 0.00015, 12.51050, 0.573808],
    ['2015F', 0.00515, 0.00002, 12.19430, 0.447450],
    ['2015F', 0.00515, 0.00002, 12.28600, 0.406132],
    ['2007sr', 0.00660, 0.00002, 12.42690, 0.374942],
    ['2007sr', 0.00660, 0.00002, 12.37620, 0.384810],
    ['2018gv', 0.00596, 0.00015, 12.68740, 0.343274],
    ['2018gv', 0.00596, 0.00015, 12.81360, 0.342645],
    ['2018gv', 0.00596, 0.00015, 12.65720, 0.349206],
    ['2007af', 0.00635, 0.00001, 12.81370, 0.324810],
    ['2007af', 0.00635, 0.00001, 12.74930, 0.360550],
    ['2007af', 0.00635, 0.00001, 12.84690, 0.321680],
    ['2007af', 0.00635, 0.00001, 12.78070, 0.338090],
    ['2007le', 0.00552, 0.00001, 12.82240, 0.533308],
    ['2007le', 0.00552, 0.00001, 12.83130, 0.536656],
    ['2007le', 0.00552, 0.00001, 12.76730, 0.537482],
    ['2019np', 0.00550, 0.00000, 13.20780, 0.317328],
    ['2019np', 0.00550, 0.00000, 13.18080, 0.321157],
    ['2017erp', 0.00727, 0.00015, 12.94210, 0.339458],
    ['2017erp', 0.00727, 0.00015, 12.91990, 0.370142],
    ['2017erp', 0.00727, 0.00015, 12.95180, 0.346900],
    ['2005cf', 0.00703, 0.00006, 13.06630, 0.324465],
    ['2005cf', 0.00703, 0.00006, 13.07970, 0.347269],
    ['2005cf', 0.00703, 0.00006, 13.06910, 0.321523],
    ['2002fk', 0.00668, 0.00015, 13.18930, 0.299093],
    ['2002fk', 0.00668, 0.00015, 13.21120, 0.299053],
    ['2003du', 0.00664, 0.00002, 13.54130, 0.287870],
    ['2003du', 0.00664, 0.00002, 13.48930, 0.293520],
    ['2003du', 0.00664, 0.00002, 13.51550, 0.291161],
    ['2008Q', 0.00722, 0.00002, 13.07820, 0.372866],
    ['2008Q', 0.00722, 0.00002, 13.04680, 0.395732],
    ['1998dh', 0.00769, 0.00002, 13.46340, 0.315879],
    ['1998dh', 0.00769, 0.00002, 13.36210, 0.316306],
    ['2009ig', 0.00801, 0.00002, 13.11810, 0.370944],
    # From page 2 (continuing, removing duplicates)
    ['2009ig', 0.00801, 0.00002, 13.49040, 0.278844],
    ['2009ig', 0.00801, 0.00002, 13.41770, 0.285702],
    ['2013gh', 0.00775, 0.00015, 13.26800, 0.464828],
    ['2013gh', 0.00775, 0.00015, 13.43920, 0.484113],
    ['2005am', 0.00841, 0.00010, 13.12140, 0.337245],
    ['2005am', 0.00841, 0.00010, 13.14150, 0.330194],
    ['2005am', 0.00841, 0.00010, 13.08200, 0.336798],
    ['2002er', 0.00853, 0.00001, 13.54600, 0.367870],
    ['2002er', 0.00853, 0.00001, 13.49680, 0.408634],
    ['2006D', 0.00966, 0.00005, 13.63840, 0.285150],
    ['2006D', 0.00966, 0.00005, 13.64430, 0.281576],
    ['2006D', 0.00966, 0.00005, 13.66290, 0.284225],
    ['1999cp', 0.00998, 0.00019, 13.78690, 0.267622],
    ['1999cp', 0.00998, 0.00019, 13.96050, 0.252188],
    ['2002cr', 0.00998, 0.00019, 13.97790, 0.250455],
    ['2002cr', 0.00998, 0.00019, 13.99390, 0.253451],
    ['2002dj', 0.01051, 0.00023, 13.64800, 0.308368],
    ['2002dj', 0.01051, 0.00023, 13.61240, 0.333397],
    ['1998es', 0.00957, 0.00015, 13.54990, 0.356870],
    ['1998es', 0.00957, 0.00015, 13.66350, 0.371852],
    ['2009Y', 0.01050, 0.00015, 13.39270, 0.408196],
    ['2009Y', 0.01050, 0.00015, 13.49280, 0.359283],
    ['2009Y', 0.01050, 0.00015, 13.64850, 0.332913],
    ['1999ac', 0.00979, 0.00002, 13.66520, 0.364224],
    ['1999ac', 0.00979, 0.00002, 13.71440, 0.340810],
    ['2009an', 0.00921, 0.00001, 14.08480, 0.305101],
    ['2009an', 0.00921, 0.00001, 13.97230, 0.297865],
    ['2002dp', 0.01049, 0.00001, 14.12760, 0.307827],
    ['2002dp', 0.01049, 0.00001, 14.04010, 0.273239],
    ['iPTF13ebh', 0.01238, 0.00005, 14.48070, 0.341421],
    ['iPTF13ebh', 0.01238, 0.00005, 14.38390, 0.293983],
    ['2013ex', 0.01096, 0.00002, 14.18060, 0.282135],
    ['2013ex', 0.01096, 0.00002, 14.24170, 0.324050],
    ['2002ha', 0.01220, 0.00010, 14.45500, 0.239241],
    ['2002ha', 0.01220, 0.00010, 14.47160, 0.248635],
    ['2009kq', 0.01247, 0.00015, 14.33440, 0.258654],
    ['2009kq', 0.01247, 0.00015, 14.26480, 0.264818],
    ['2001ep', 0.01306, 0.00015, 14.38350, 0.286107],
    ['2001ep', 0.01306, 0.00015, 14.24980, 0.330021],
    ['2013gy', 0.01309, 0.00002, 14.48250, 0.238258],
    ['2013gy', 0.01309, 0.00002, 14.50770, 0.285948],
    ['1999dq', 0.01334, 0.00000, 14.26700, 0.272200],
    ['1999dq', 0.01334, 0.00000, 14.21870, 0.260204],
    ['2007hj', 0.01288, 0.00013, 14.71520, 0.302491],
    ['2007hj', 0.01288, 0.00013, 14.73160, 0.298179],
    # From page 3
    ['2007hj', 0.01288, 0.00013, 14.67170, 0.303407],
    ['2008hv', 0.01360, 0.00007, 14.54400, 0.276540],
    ['2008hv', 0.01360, 0.00007, 14.51530, 0.231206],
    ['2008hv', 0.01360, 0.00007, 14.51900, 0.234204],
    ['1999dk', 0.01400, 0.00000, 14.55230, 0.287538],
    ['1999dk', 0.01400, 0.00000, 14.41210, 0.294973],
    ['2005kc', 0.01386, 0.00000, 14.76570, 0.306005],
    ['2005kc', 0.01386, 0.00000, 14.77190, 0.351302],
    ['2007ca', 0.01509, 0.00001, 15.08360, 0.369731],
    ['2007ca', 0.01509, 0.00001, 14.92510, 0.395988],
    ['2007ca', 0.01509, 0.00001, 14.99900, 0.396317],
    ['2005bo', 0.01503, 0.00003, 14.50230, 0.389571],
    ['2005bo', 0.01503, 0.00003, 14.46590, 0.391891],
    ['2005el', 0.01483, 0.00012, 14.72100, 0.227971],
    ['2005el', 0.01483, 0.00012, 14.67310, 0.230130],
    ['1999ej', 0.01534, 0.00003, 15.00510, 0.271187],
    ['1999ej', 0.01534, 0.00003, 14.95820, 0.256655],
    ['2001en', 0.01534, 0.00001, 14.74640, 0.285045],
    ['2001en', 0.01534, 0.00001, 14.63220, 0.312769],
    ['2001V', 0.01592, 0.00090, 14.53720, 0.289320],
    ['2001V', 0.01592, 0.00090, 14.55420, 0.289137],
    ['2008ec', 0.01506, 0.00006, 14.92020, 0.262981],
    ['2008ec', 0.01506, 0.00006, 14.87720, 0.333218],
    ['2001bf', 0.01556, 0.00013, 14.73960, 0.237761],
    ['2001bf', 0.01556, 0.00013, 14.64740, 0.217323],
    ['1999aa', 0.01579, 0.00001, 14.91330, 0.241388],
    ['1999aa', 0.01579, 0.00001, 14.87930, 0.207724],
    ['2007A', 0.01646, 0.00009, 15.21190, 0.357309],
    ['2007A', 0.01646, 0.00009, 15.28110, 0.340551],
    ['1998ef', 0.01610, 0.00000, 14.58800, 0.288048],
    ['1998ef', 0.01610, 0.00000, 14.64450, 0.263180],
    ['2001da', 0.01658, 0.00001, 14.76900, 0.307813],
    ['2001da', 0.01658, 0.00001, 14.94730, 0.324206],
    ['2000dk', 0.01649, 0.00010, 14.89060, 0.281398],
    ['2000dk', 0.01649, 0.00010, 14.89870, 0.255715],
    ['2007fb', 0.01680, 0.00001, 15.14790, 0.220048],
    ['2007fb', 0.01680, 0.00001, 15.25710, 0.229657],
    ['2008C', 0.01709, 0.00001, 15.05700, 0.262170],
    ['2008C', 0.01709, 0.00001, 15.01390, 0.261032],
    ['2006ax', 0.01774, 0.00015, 15.06980, 0.198413],
    ['2006ax', 0.01774, 0.00015, 15.06030, 0.195968],
    ['2008L', 0.01734, 0.00009, 15.08340, 0.208373],
    ['2008L', 0.01734, 0.00009, 14.99340, 0.211714],
    ['2009le', 0.01739, 0.00010, 15.04090, 0.245119],
    ['2009le', 0.01739, 0.00010, 14.98880, 0.221228],
    # From page 7 (higher z examples)
    ['2005hc', 0.04496, 0.00002, 17.21040, 0.171419],
    ['2005hc', 0.04496, 0.00002, 17.26090, 0.149515],
    ['2008cf', 0.04692, 0.00009, 17.22560, 0.145717],
    ['2008cf', 0.04692, 0.00009, 17.23270, 0.180924],
    ['2006ot', 0.05232, 0.00015, 17.61490, 0.206551],
    ['2006ot', 0.05232, 0.00015, 17.29030, 0.297607],
    ['2006ob', 0.05760, 0.00004, 17.72910, 0.135485],
    ['2006ob', 0.05760, 0.00004, 17.67940, 0.144234],
    ['2001ah', 0.05837, 0.00001, 17.72720, 0.213869],
    ['2001ah', 0.05837, 0.00001, 17.89300, 0.251358],
    ['2008bz', 0.06130, 0.00001, 17.91010, 0.120944],
    ['2008bz', 0.06130, 0.00001, 17.93950, 0.158283],
    ['2008go', 0.06116, 0.00015, 17.70780, 0.194277],
    ['2008go', 0.06116, 0.00015, 17.71610, 0.139395],
    ['2008Y', 0.07028, 0.00002, 18.04310, 0.225296],
    ['2008Y', 0.07028, 0.00002, 18.02450, 0.210599],
    # Add more lines if you have additional chunks; this covers the provided extracts
    # Total lines here: ~150 (extend to 286 if full data available)
]

# Create DataFrame from reconstructed data
columns = ['CID', 'zCMB', 'zCMBERR', 'm_b_corr', 'm_b_corr_err_DIAG']
data = pd.DataFrame(reconstructed_data, columns=columns)

# Optional: Save to file for future use
data.to_csv('reconstructed_duplicates_log_v8_120.txt', sep='\t', index=False)
print(f"Reconstructed duplicates_log_v8_120.txt with {len(data)} lines. If not 286, add more data.")

# Step 1: Deduplication
deduplicated = data.groupby(['CID', 'zCMB']).agg({
    'm_b_corr': 'mean',
    'm_b_corr_err_DIAG': 'min',
    'zCMBERR': 'mean'
}).reset_index()
deduplicated.to_csv('deduplicated_v8_120.csv', index=False)
print(f"Deduplicated data saved. Original lines: {len(data)}, Deduplicated: {len(deduplicated)}")

# Step 2: Load deduplicated SNIa data
snia_data = pd.read_csv('deduplicated_v8_120.csv')
z = snia_data['zCMB'].values
mu_obs = snia_data['m_b_corr'].values  # Distance modulus approximation
mu_err = snia_data['m_b_corr_err_DIAG'].values

# Step 3: Load BAO data (example from ACT+SPT_cl.dat; simplified; replace with actual if needed)
bao_z = np.array([0.3, 0.5, 0.7])  # Example redshifts
bao_dv = np.array([10.0, 15.0, 20.0])  # DV measurements (adjust based on real data)
bao_err = np.array([0.5, 0.7, 1.0])

# Step 4: UQCMF term: Local dispersion from mind-gravity (simplified from 3D simulation)
def uqcmf_dispersion(z, lambda_inter=1e-10):
    # Approximate from CSV analysis: dispersion ~ log(|Ψ|^2) * lambda
    # Based on correlation plot; can be enhanced with actual CSV data
    return lambda_inter * np.log10(1 + z * 1e10)  # Placeholder based on correlation plot

# Step 5: Model: UQGPF with UQCMF correction
def model_mu(z, om, h, gamma, lambda_uqcmf):
    # Simplified Flat LCDM + UQGPF gamma + UQCMF dispersion
    dl = (1 + z) * (3000 / h) * np.sqrt(om * (1 + z)**3 + (1 - om) * (1 + z)**gamma)
    mu = 5 * np.log10(dl) + 25 + uqcmf_dispersion(z, lambda_uqcmf)
    return mu

# Step 6: Chi-squared (includes SNIa and BAO)
def chi2(params):
    om, h, gamma, lambda_uqcmf = params
    mu_theory = model_mu(z, om, h, gamma, lambda_uqcmf)
    chi_snia = np.sum(((mu_obs - mu_theory) / mu_err)**2)
    
    # BAO chi2 (simplified)
    dv_theory = (3000 / h) * np.sqrt(om * (1 + bao_z)**3 + (1 - om) * (1 + bao_z)**gamma)
    chi_bao = np.sum(((bao_dv - dv_theory) / bao_err)**2)
    
    return chi_snia + chi_bao

# Step 7: Priors
def log_prior(params):
    om, h, gamma, lambda_uqcmf = params
    if 0 < om < 1 and 0.4 < h < 1.1 and 1.5 < gamma < 5.5 and 1e-12 < lambda_uqcmf < 1e-8:
        return 0.0
    return -np.inf

# Step 8: Log probability
def log_prob(params):
    lp = log_prior(params)
    if not np.isfinite(lp):
        return -np.inf
    return lp - 0.5 * chi2(params)

# Step 9: Minimize first to find initial guess
initial = [0.3, 0.7, 3.0, 1e-10]
res = minimize(chi2, initial, bounds=[(0,1), (0.4,1.1), (1.5,5.5), (1e-12,1e-8)])
print(f"Best-fit: om={res.x[0]:.2f}, h={res.x[1]:.2f}, gamma={res.x[2]:.2f}, lambda_uqcmf={res.x[3]:.2e}, chi2={res.fun:.2f}")

# Step 10: MCMC sampling
ndim = 4
nwalkers = 32
pos = res.x + 1e-4 * np.random.randn(nwalkers, ndim)
sampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob)
sampler.run_mcmc(pos, 5000, progress=True)

# Step 11: Flatten samples and plot posteriors
samples = sampler.get_chain(discard=1000, thin=15, flat=True)
fig = corner.corner(samples, labels=["om", "h", "gamma", "lambda_uqcmf"])
fig.savefig('uqcmf_posteriors_v1_0.pdf')

# Step 12: Save residuals
mu_best = model_mu(z, *res.x)
residuals = mu_obs - mu_best
np.savetxt('residuals_uqcmf_v1_0.csv', np.column_stack((z, residuals)), header='z,residual')

# Step 13: Optional: Average scatter analysis for validation
scatter = snia_data.groupby('zCMB')['m_b_corr'].std().mean()
print(f"Average scatter in SNIa: {scatter:.4f}")

print("UQCMF v1.0-integrated-UQGPF v8.175 completed. Check outputs: uqcmf_posteriors_v1_0.pdf and residuals_uqcmf_v1_0.csv")
